import React, { useState, useEffect } from 'react'
import { getUserType } from '../services/api'

const LandingPage = () => {
  const [selectedView, setSelectedView] = useState(null)
  const [loading, setLoading] = useState(false)

  const handleViewSelection = async (viewType) => {
    setLoading(true)
    try {
      const data = await getUserType(viewType)
      setSelectedView(data.userType)
    } catch (error) {
      console.error('Error loading view:', error)
      setSelectedView(viewType) // Fallback
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-slate-900">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-white">Loading...</p>
        </div>
      </div>
    )
  }

  if (selectedView === 'learner') {
    return <LearnerView onBack={() => setSelectedView(null)} />
  }

  if (selectedView === 'company') {
    return <CompanyView onBack={() => setSelectedView(null)} />
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 flex items-center justify-center">
      <div className="text-center">
        <h1 className="text-4xl font-bold text-white mb-12">LearnerAI</h1>
        
        <div className="space-y-6">
          <button
            onClick={() => handleViewSelection('learner')}
            className="w-64 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-4 px-8 rounded-xl text-lg transition-colors"
          >
            üë®‚Äçüéì Learner Path
          </button>
          
          <button
            onClick={() => handleViewSelection('company')}
            className="w-64 bg-green-600 hover:bg-green-700 text-white font-semibold py-4 px-8 rounded-xl text-lg transition-colors"
          >
            üè¢ Company Workers
          </button>
        </div>
      </div>
    </div>
  )
}

// Learner View - Shows AI-generated learning path topics
const LearnerView = ({ onBack }) => {
  const [learningPath, setLearningPath] = useState(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    loadLearningPath()
  }, [])

  const loadLearningPath = async () => {
    try {
      console.log('Fetching learning path...')
      const response = await fetch('http://localhost:5000/api/learning-paths/learner/my-path')
      console.log('Response status:', response.status)
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      const data = await response.json()
      console.log('API Response:', data) // Debug log
      console.log('Learning Path:', data.learningPath) // Debug log
      console.log('User:', data.learningPath?.user) // Debug log
      
      setLearningPath(data.learningPath)
    } catch (error) {
      console.error('Error loading learning path:', error)
      console.error('Error details:', error.message)
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-slate-900">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-white">Loading your learning path...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-slate-900 p-8">
      {/* Header with Back Button */}
      <div className="flex items-center mb-8">
        <button
          onClick={onBack}
          className="mr-4 p-2 bg-slate-700 hover:bg-slate-600 rounded-lg text-white"
        >
          ‚Üê Back
        </button>
        <h1 className="text-3xl font-bold text-white">My Learning Path</h1>
      </div>

      {/* Learning Path Overview */}
      <div className="bg-slate-800 rounded-xl p-6 mb-8">
        <h2 className="text-2xl font-bold text-white mb-4">{learningPath?.name}</h2>
        <p className="text-slate-300 mb-4 text-lg">{learningPath?.description}</p>
        <div className="flex items-center justify-between">
          <div className="text-slate-400">
            <span className="font-semibold">Progress:</span> {learningPath?.progress}% ‚Ä¢ 
            <span className="font-semibold ml-2">Duration:</span> {learningPath?.estimatedDuration} ‚Ä¢ 
            <span className="font-semibold ml-2">Generated by:</span> {learningPath?.generatedBy}
          </div>
          <div className="w-32 bg-slate-700 rounded-full h-2">
            <div 
              className="bg-blue-500 h-2 rounded-full"
              style={{ width: `${learningPath?.progress}%` }}
            ></div>
          </div>
        </div>
      </div>

      {/* Learning Path Steps - Ordered List */}
      <div className="space-y-6">
        <h3 className="text-2xl font-bold text-white mb-6">üìö Learning Journey - Step by Step</h3>
        
        {learningPath?.modules?.map((module, moduleIndex) => (
          <div key={module.id} className="bg-slate-800 rounded-xl p-6">
            {/* Module Header */}
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center">
                <div className={`w-10 h-10 rounded-full flex items-center justify-center text-white font-bold mr-4 ${
                  module.status === 'Completed' ? 'bg-green-500' :
                  module.status === 'In Progress' ? 'bg-blue-500' :
                  'bg-gray-500'
                }`}>
                  {moduleIndex + 1}
                </div>
                <div>
                  <h4 className="text-xl font-bold text-white">{module.title}</h4>
                  <p className="text-slate-300">{module.description}</p>
                </div>
              </div>
              <div className="text-right">
                <span className={`px-4 py-2 rounded-full text-sm font-medium ${
                  module.status === 'Completed' ? 'bg-green-500 text-white' :
                  module.status === 'In Progress' ? 'bg-blue-500 text-white' :
                  'bg-gray-500 text-white'
                }`}>
                  {module.status}
                </span>
                {module.status !== 'Not Started' && (
                  <div className="text-sm text-slate-400 mt-1">{module.progress}% Complete</div>
                )}
              </div>
            </div>

            {/* Module Progress Bar */}
            {module.status !== 'Not Started' && (
              <div className="mb-4">
                <div className="w-full bg-slate-700 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full transition-all duration-500 ${
                      module.status === 'Completed' ? 'bg-green-500' : 'bg-blue-500'
                    }`}
                    style={{ width: `${module.progress}%` }}
                  ></div>
                </div>
              </div>
            )}

            {/* Lessons List */}
            <div className="space-y-3">
              <h5 className="text-lg font-semibold text-white mb-3">üìñ Lessons in this module:</h5>
              {module.lessons?.map((lesson, lessonIndex) => (
                <div key={lesson.id} className="flex items-center justify-between bg-slate-700 rounded-lg p-4">
                  <div className="flex items-center">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium mr-4 ${
                      lesson.status === 'Completed' ? 'bg-green-500 text-white' :
                      lesson.status === 'In Progress' ? 'bg-blue-500 text-white' :
                      'bg-gray-500 text-white'
                    }`}>
                      {moduleIndex + 1}.{lessonIndex + 1}
                    </div>
                    <div>
                      <span className="text-white font-medium text-lg">{lesson.title}</span>
                      <span className="text-slate-400 ml-3">‚è±Ô∏è {lesson.duration}</span>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    {lesson.score && (
                      <div className="text-green-400 font-bold text-lg">{lesson.score}%</div>
                    )}
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                      lesson.status === 'Completed' ? 'bg-green-500 text-white' :
                      lesson.status === 'In Progress' ? 'bg-blue-500 text-white' :
                      'bg-gray-500 text-white'
                    }`}>
                      {lesson.status === 'Completed' ? '‚úÖ Completed' :
                       lesson.status === 'In Progress' ? 'üîÑ In Progress' :
                       '‚è≥ Not Started'}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}

        {/* Learning Goals */}
        <div className="bg-slate-800 rounded-xl p-6 mt-8">
          <h3 className="text-xl font-bold text-white mb-4">üéØ Your Learning Goals</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {learningPath?.user?.learningGoals?.map((goal, index) => (
              <div key={index} className="flex items-center bg-slate-700 rounded-lg p-3">
                <span className="w-3 h-3 bg-blue-500 rounded-full mr-3"></span>
                <span className="text-slate-200">{goal}</span>
              </div>
            ))}
          </div>
        </div>

        {/* AI Recommendations */}
        {learningPath?.aiRecommendations && learningPath.aiRecommendations.length > 0 && (
          <div className="bg-gradient-to-r from-blue-500/20 to-purple-500/20 border border-blue-500/30 rounded-xl p-6 mt-8">
            <h3 className="text-xl font-bold text-white mb-4">ü§ñ AI Recommendations</h3>
            <div className="space-y-4">
              {learningPath.aiRecommendations.map((rec, index) => (
                <div key={index} className={`p-4 rounded-lg border-l-4 ${
                  rec.priority === 'high' ? 'bg-red-500/10 border-red-400' :
                  rec.priority === 'medium' ? 'bg-yellow-500/10 border-yellow-400' :
                  'bg-green-500/10 border-green-400'
                }`}>
                  <div className="flex items-start">
                    <span className={`text-xl mr-3 ${
                      rec.priority === 'high' ? 'text-red-400' :
                      rec.priority === 'medium' ? 'text-yellow-400' :
                      'text-green-400'
                    }`}>
                      {rec.type === 'skill_gap' ? 'üéØ' : 'üí°'}
                    </span>
                    <div>
                      <p className="font-medium text-white">{rec.message}</p>
                      <span className={`text-sm px-2 py-1 rounded-full mt-2 inline-block ${
                        rec.priority === 'high' ? 'bg-red-500/20 text-red-300' :
                        rec.priority === 'medium' ? 'bg-yellow-500/20 text-yellow-300' :
                        'bg-green-500/20 text-green-300'
                      }`}>
                        {rec.priority} priority
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

// Company View - Shows workers with dropdown choice lists
const CompanyView = ({ onBack }) => {
  const [workers, setWorkers] = useState([])
  const [loading, setLoading] = useState(true)
  const [selectedWorker, setSelectedWorker] = useState('')
  const [selectedCourse, setSelectedCourse] = useState('')

  useEffect(() => {
    loadWorkers()
  }, [])

  const loadWorkers = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/workers')
      const data = await response.json()
      setWorkers(data.workers)
    } catch (error) {
      console.error('Error loading workers:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleWorkerChange = (workerId) => {
    setSelectedWorker(workerId)
    setSelectedCourse('') // Reset course selection when worker changes
  }

  const handleCourseChange = (courseId) => {
    setSelectedCourse(courseId)
  }

  const getSelectedWorker = () => {
    return workers.find(worker => worker.id === selectedWorker)
  }

  const getSelectedCourse = () => {
    const worker = getSelectedWorker()
    if (!worker) return null
    return worker.learningPath.courses?.find(course => course.id === selectedCourse)
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-slate-900">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-white">Loading workers...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-slate-900 p-8">
      {/* Header with Back Button */}
      <div className="flex items-center mb-8">
        <button
          onClick={onBack}
          className="mr-4 p-2 bg-slate-700 hover:bg-slate-600 rounded-lg text-white"
        >
          ‚Üê Back
        </button>
        <h1 className="text-3xl font-bold text-white">Company Workers</h1>
      </div>

      <div className="max-w-4xl mx-auto space-y-6">
        {/* Workers Dropdown */}
        <div className="bg-slate-800 rounded-xl p-6">
          <h2 className="text-xl font-bold text-white mb-4">Workers:</h2>
          <select
            value={selectedWorker}
            onChange={(e) => handleWorkerChange(e.target.value)}
            className="w-full p-3 bg-slate-700 text-white rounded-lg border border-slate-600 focus:border-blue-500 focus:outline-none"
          >
            <option value="">Select a worker...</option>
            {workers?.map((worker) => (
              <option key={worker.id} value={worker.id}>
                {worker.name}
              </option>
            ))}
          </select>
        </div>

        {/* Courses Dropdown - Only show if worker is selected */}
        {selectedWorker && (
          <div className="bg-slate-800 rounded-xl p-6">
            <h2 className="text-xl font-bold text-white mb-4">Courses:</h2>
            <select
              value={selectedCourse}
              onChange={(e) => handleCourseChange(e.target.value)}
              className="w-full p-3 bg-slate-700 text-white rounded-lg border border-slate-600 focus:border-blue-500 focus:outline-none"
            >
              <option value="">Select a course...</option>
              {getSelectedWorker()?.learningPath.courses?.map((course) => (
                <option key={course.id} value={course.id}>
                  {course.title}
                </option>
              ))}
            </select>
          </div>
        )}

        {/* Course Details - Only show if both worker and course are selected */}
        {selectedWorker && selectedCourse && (
          <div className="bg-slate-800 rounded-xl p-6">
            <h2 className="text-xl font-bold text-white mb-6">
              {getSelectedWorker()?.name} - {getSelectedCourse()?.title}
            </h2>
            
            <div className="space-y-4">
              <div className="bg-slate-700 rounded-lg p-4">
                <div className="space-y-3 text-sm">
                  <div className="flex items-center">
                    <span className="text-slate-400 w-32 font-semibold">Learning Path:</span>
                    <span className="text-white">
                      {getSelectedCourse()?.title} Mastery Program - {getSelectedCourse()?.title.toLowerCase()} fundamentals to advanced concepts
                    </span>
                  </div>
                  
                  <div className="flex items-center">
                    <span className="text-slate-400 w-32 font-semibold">Progress:</span>
                    <div className="flex items-center">
                      <span className="text-white mr-2">
                        {getSelectedCourse()?.status === 'Completed' ? '100%' :
                         getSelectedCourse()?.status === 'In Progress' ? '65%' : '0%'}
                      </span>
                      <div className="w-32 bg-slate-600 rounded-full h-2">
                        <div
                          className={`h-2 rounded-full transition-all duration-500 ${
                            getSelectedCourse()?.status === 'Completed' ? 'bg-green-500' :
                            getSelectedCourse()?.status === 'In Progress' ? 'bg-blue-500' : 'bg-gray-500'
                          }`}
                          style={{ 
                            width: getSelectedCourse()?.status === 'Completed' ? '100%' :
                                   getSelectedCourse()?.status === 'In Progress' ? '65%' : '0%'
                          }}
                        ></div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center">
                    <span className="text-slate-400 w-32 font-semibold">Date of Starting:</span>
                    <span className="text-white">
                      {getSelectedCourse()?.status === 'Completed' ? getSelectedCourse()?.completedDate :
                       getSelectedCourse()?.status === 'In Progress' ? getSelectedWorker()?.learningPath.startDate :
                       'Not Started'}
                    </span>
                  </div>
                  
                  <div className="flex items-center">
                    <span className="text-slate-400 w-32 font-semibold">Duration:</span>
                    <span className="text-white">{getSelectedCourse()?.duration}</span>
                  </div>
                  
                  {getSelectedCourse()?.score && (
                    <div className="flex items-center">
                      <span className="text-slate-400 w-32 font-semibold">Score:</span>
                      <span className="text-green-400 font-semibold">{getSelectedCourse()?.score}%</span>
                    </div>
                  )}

                  <div className="flex items-center">
                    <span className="text-slate-400 w-32 font-semibold">Status:</span>
                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                      getSelectedCourse()?.status === 'Completed' ? 'bg-green-500 text-white' :
                      getSelectedCourse()?.status === 'In Progress' ? 'bg-blue-500 text-white' :
                      'bg-gray-500 text-white'
                    }`}>
                      {getSelectedCourse()?.status === 'Completed' ? '‚úÖ Completed' :
                       getSelectedCourse()?.status === 'In Progress' ? 'üîÑ In Progress' :
                       '‚è≥ Not Started'}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default LandingPage